{"version":3,"sources":["components/Header.js","components/Footer.js","components/SearchForm.js","components/DisplayArea.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Footer","APIKEY","process","SearchForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","getSearchResults","state","searchInput","handleChange","setState","target","value","console","log","query","axios","get","params","key","imgonly","ps","q","results","art","data","artObjects","props","updateArt","updateCurrentSearch","_context","t0","message","_this2","onSubmit","event","htmlFor","type","name","id","onChange","Component","DisplayArea","className","length","currentSearch","map","item","title","webImage","artist","principalOrFirstMaker","src","url","alt","App","AppBar_default","position","components_Header","color","components_SearchForm","components_DisplayArea","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96462034.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\n\nfunction Header() {\n\treturn (\n\t\t\t<header>\n\t\t\t\t<h1>Rijks Museum Database</h1>\n\t\t\t</header>\n\t);\n}\n\nexport default Header;","import React from 'react';\n\nfunction Footer() {\n\treturn (\n\t\t<footer><p>&copy;2019 Yogesh Chalodiya</p></footer>\n\t);\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button'; \n\nconst APIKEY = process.env.REACT_APP__API_KEY \n// Your API Key goes here, I'm putting it in .env\n\n// Searchform is in charge of the actual call to the API, \n// It should have a controlled input for searching (what are the 3 things we need to make a controlled input?)\n// It will recieve 2 function props, one to pass the current search term to App\n// And one to pass the current search results to the App\n\n// This component should have the structure:\n// <form>\n// \t<label></label>\n//\t<input type=\"search\"/>\n// </form>\n\nclass SearchForm extends Component {\n\n\tconstructor() {\n\t\tsuper();\n\t\tconsole.log(APIKEY);\n\t\tthis.state = {\n\t\t\tsearchInput: ''\n\t\t};\n\t}\n\n\tasync getSearchResults(query) {\n\t\tconsole.log(query);\n\t\ttry {\n\t\t\t// Make an Ajax call with Axios here\n\t\t\tconst url = 'https://www.rijksmuseum.nl/api/en/collection/';\n\t\t\tconst results = await axios.get(url, {\n\t\t\t\tparams : {\n\t\t\t\t\tkey: APIKEY,\n\t\t\t\t\timgonly: true,\n\t\t\t\t\tps: 20,\n\t\t\t\t\tq: query\n\t\t\t\t}\n\t\t\t});\t\n\n\t\t\tconst art = results.data.artObjects;\n\t\t\tthis.props.updateArt(art);\n\t\t\tthis.props.updateCurrentSearch(this.state.searchInput);\n\t\t\t// console.log(art);\n\t\t\tthis.setState({\n\t\t\t\tsearchInput: ''\n\t\t\t})\n\t\t\t// Reset our search form\n\t\t} catch (error) {\n\t\t\tconsole.log(error.message);\n\t\t}\n\t}\n\n\thandleSubmit = (e) => {\n\t\t//console.log(e);\n\t\te.preventDefault();\n\n\t\tthis.getSearchResults( this.state.searchInput);\t\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tsearchInput: e.target.value\n\t\t})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form onSubmit={ (event) => {this.handleSubmit(event)}}>\n\t\t\t\t<label htmlFor=\"\"> Find Some Art:</label>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"search\" \n\t\t\t\t\tname=\"search\"\n\t\t\t\t\tid=\"search\"\n\t\t\t\t\tvalue={this.state.searchInput}\n\t\t\t\t\tonChange={(event) => this.handleChange(event)}\n\t\t\t\t>\n\t\t\t\t</input>\t\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default SearchForm;","import React, { Component } from 'react';\nimport { identifier } from '@babel/types';\n\n// If there is nothing to display: \n// <div className=\"noResults\">\n// \t<p>Please enter a search term.</p>\n// </div>\n\n// If there are results to display:\n//<div className=\"showResults\">\n//\t<p>Showing results for:</p>\n//\t<div className=\"artworks\">\n//\t... results go here\n//\t</div>\n//</div>\n\n// Each piece of art should have structure:\n// <div className=\"art\">\n// \t<img src=\"\" alt=\"\"/>\n// \t<h2>Title</h2>\n// \t<h3>Artist</h3>\n// </div>\n\nfunction DisplayArea(props) {\n\n\t\treturn (\n\t\t\t<div className=\"displayArea\" >\n\t\t\t\t{\n\t\t\t\t\tprops.art.length > 0 ? (\n\t\t\t\t\t\t<div className=\"showResults\">\n\t\t\t\t\t\t\t<p>Your Result Arts: { props.currentSearch }</p>\n\t\t\t\t\t\t\t<div className=\"artworks\">\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tprops.art.map( item => {\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\t\t\t\tid, title, webImage, principalOrFirstMaker: artist\n\t\t\t\t\t\t\t\t\t} = item;\n\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div key={id} className=\"art\">\n\t\t\t\t\t\t\t\t\t\t\t<img src={webImage.url} alt=\"\"/>\n\t\t\t\t\t\t\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t\t\t\t\t\t\t\t<h3>{artist}</h3>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div className=\"noResults\">\n\t\t\t\t\t\t\t<p> First Enter Your Favourite Search Term </p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t</div>\n\t\t);\n}\n\nexport default DisplayArea;","import React, { Component } from 'react';\nimport './App.scss';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SearchForm from './components/SearchForm';\nimport DisplayArea from './components/DisplayArea';\n\nimport AppBar from '@material-ui/core/AppBar';\n\n// Our app should have state for the current search term and results, so it can pass these things to the display area\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentSearch: '',\n      art: []\n    }\n  }\n\n  updateCurrentSearch = (currentSearch) => {\n    this.setState({\n      currentSearch\n    });\n  }\n\n  updateArt = (art) => {\n    this.setState({\n      art\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n\n          <Header />\n        </AppBar>\n        <main>\n          <AppBar position=\"sticky\" color=\"default\">\n\n            <SearchForm \n            updateArt={this.updateArt} \n            updateCurrentSearch={this.updateCurrentSearch}\n            />\n          </AppBar>\n          \n                <DisplayArea \n                art={this.state.art} \n                currentSearch={this.state.currentSearch}\n                />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}